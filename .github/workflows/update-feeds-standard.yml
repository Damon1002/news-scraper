name: Standard News Updates (Tech/Business/World)

on:
  schedule:
    # Standard sources: Every 30 minutes for world, Every hour for tech/business
    - cron: '*/30 * * * *'
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      categories:
        description: 'Categories to update (comma-separated)'
        required: false
        default: 'technology,business,world'
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - '.github/workflows/update-feeds-standard.yml'

# Prevent overlapping runs with fast updates
concurrency:
  group: standard-updates
  cancel-in-progress: false

jobs:
  update-standard-feeds:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Cache news data
      uses: actions/cache@v4
      with:
        path: |
          cache/
        key: ${{ runner.os }}-news-cache-v2-${{ hashFiles('src/**/*.ts', 'src/**/*.json') }}
        restore-keys: |
          ${{ runner.os }}-news-cache-v2-
          ${{ runner.os }}-news-cache-

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: |
        # Only install if not cached
        if [ ! -d ~/.cache/ms-playwright ]; then
          echo "Installing Playwright browsers..."
          npx playwright install chromium --with-deps
        else
          echo "Using cached Playwright browsers"
        fi

    - name: Create output directories
      run: |
        mkdir -p docs/feeds
        mkdir -p docs/status
        mkdir -p cache

    - name: Run standard news aggregation
      run: |
        CATEGORIES="${{ github.event.inputs.categories || 'technology,business,world' }}"
        echo "Updating categories: $CATEGORIES"
        npm start -- --categories="$CATEGORIES"
      env:
        NODE_ENV: production
      timeout-minutes: 12

    - name: Generate status report
      run: |
        echo "# Standard Feed Update Status" > docs/status/standard-latest.md
        echo "Last updated: $(date -u)" >> docs/status/standard-latest.md
        echo "Categories: ${{ github.event.inputs.categories || 'technology,business,world' }}" >> docs/status/standard-latest.md
        echo "" >> docs/status/standard-latest.md
        echo "## Feed Files Generated" >> docs/status/standard-latest.md
        if [ -d "docs/feeds" ]; then
          for category in technology business world; do
            file="docs/feeds/${category}.xml"
            if [ -f "$file" ]; then
              filesize=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              echo "- ${category}.xml ($filesize bytes)" >> docs/status/standard-latest.md
            fi
          done
          # Also update master feed
          if [ -f "docs/feeds/master.xml" ]; then
            filesize=$(stat -c%s "docs/feeds/master.xml" 2>/dev/null || stat -f%z "docs/feeds/master.xml")
            echo "- master.xml ($filesize bytes)" >> docs/status/standard-latest.md
          fi
        fi
        echo "" >> docs/status/standard-latest.md
        echo "Generated by Standard Updates Workflow" >> docs/status/standard-latest.md

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action (Standard Updates)"
        git add docs/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üì∞ Standard update: $(echo '${{ github.event.inputs.categories || 'technology,business,world' }}' | tr ',' '/' ) feeds - $(date -u +'%Y-%m-%d %H:%M:%S UTC')

          üîÑ Comprehensive news aggregation from multiple sources
          üåê World news, technology insights, business updates
          üìä Updated master feed with latest articles
          
          Generated by Standard Updates Workflow"
          
          # Retry push with automatic conflict resolution
          for i in {1..5}; do
            echo "Push attempt $i/5..."
            if git push; then
              echo "Push successful on attempt $i"
              break
            else
              echo "Push failed on attempt $i, fetching and resolving conflicts..."
              git fetch origin main
              
              # Check if there are conflicts and resolve them automatically
              if git merge origin/main --no-commit --no-ff; then
                echo "Clean merge, committing..."
                git commit --no-edit
              else
                echo "Conflicts detected, resolving automatically..."
                # For RSS feeds and generated files, prefer our version (latest generated content)
                git status --porcelain | grep "^UU\|^AA\|^DD" | while read status file; do
                  if [[ "$file" == docs/feeds/*.xml ]] || [[ "$file" == docs/index.html ]] || [[ "$file" == docs/status/*.md ]]; then
                    echo "Auto-resolving conflict in $file (keeping our version)"
                    git add "$file"
                  else
                    echo "Manual intervention needed for $file"
                    git add "$file"  # Accept both changes for non-feed files
                  fi
                done
                
                # Complete the merge
                git commit -m "Resolve merge conflicts - keeping latest generated feeds"
              fi
              
              if [ $i -eq 5 ]; then
                echo "All push attempts failed"
                exit 1
              fi
              sleep $((i * 3))  # Longer backoff for conflict resolution
            fi
          done
        fi

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

  deploy-pages:
    needs: update-standard-feeds
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4